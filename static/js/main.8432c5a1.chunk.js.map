{"version":3,"sources":["components/Search.js","App.js","reportWebVitals.js","index.js"],"names":["Search","useState","results","setResults","resultsList","map","book","title","author_name","join","first_publish_year","key","className","type","placeholder","onChange","e","query","url","URL","baseUrl","searchParams","append","fetch","then","response","json","searchBooks","target","value","docs","console","log","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAUA,IAgCeA,EAhCA,WACb,MAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAQMC,GAAeF,GAAW,IAAIG,KAAI,SAACC,GAAD,OACtC,+BACE,6BAAKA,EAAKC,QACV,6BAAKD,EAAKE,aAAeF,EAAKE,YAAYC,KAAK,QAC/C,6BAAKH,EAAKI,uBAHHJ,EAAKK,QAMhB,OACE,gCACE,qBAAKC,UAAU,eAAf,SACE,uBAAOC,KAAK,OAAOC,YAAY,SAASC,SAhBzB,SAACC,IATjB,SAAqBC,GAC1B,IAAMC,EAAM,IAAIC,IAAIC,sCAGpB,OAFAF,EAAIG,aAAaC,OAAO,QAASL,GAE1BM,MAAML,GAAKM,MAAK,SAACC,GAAD,OAAcA,EAASC,WAM5CC,CAAYX,EAAEY,OAAOC,OAAOL,MAAK,SAACC,GAChCtB,EAAWsB,EAASK,MACpBC,QAAQC,IAAIP,EAASK,cAerB,gDACA,8BACE,kCACE,gCAAQ1B,IACR,mC,MCtBK6B,MATf,WACE,OACE,sBAAKrB,UAAU,MAAf,UACE,8CACA,cAAC,EAAD,QCISsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.8432c5a1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst baseUrl = \"http://openlibrary.org\";\n\nexport function searchBooks(query) {\n  const url = new URL(baseUrl + \"/search.json\");\n  url.searchParams.append(\"title\", query);\n\n  return fetch(url).then((response) => response.json());\n}\nconst Search = () => {\n  const [results, setResults] = useState(0);\n\n  const searchHandle = (e) => {\n    searchBooks(e.target.value).then((response) => {\n      setResults(response.docs);\n      console.log(response.docs);\n    });\n  };\n  const resultsList = (results || []).map((book) => (\n    <tr key={book.key}>\n      <td>{book.title}</td>\n      <td>{book.author_name && book.author_name.join(\", \")}</td>\n      <td>{book.first_publish_year}</td>\n    </tr>\n  ));\n  return (\n    <div>\n      <div className=\"search-input\">\n        <input type=\"text\" placeholder=\"Search\" onChange={searchHandle}></input>\n      </div>\n      <h1>Search Results</h1>\n      <div>\n        <table>\n          <thead>{resultsList}</thead>\n          <tbody></tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\nimport Search from \"./components/Search\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>Hooks ;)</header>\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}